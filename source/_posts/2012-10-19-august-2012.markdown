---
layout: post
title: "August 2012"
date: 2012-10-19 12:50
comments: true
categories: [journey, monthly update, try ruby, try git, rubeque, project euler, rails tutorial]
---

Since this is my first monthly update I'll discuss a little of what I want to accomplish with these.  They are intended to be monthly snapshots of where I am along the development timeline and commentary about my goals and accomplishments.  
<!-- more -->
Refer to my [Coding Timeline](/coding-timeline) for all the links to the items discussed here.

Things I worked on:
-
###Rails Tutorial by Michael Hartl  
This is a pretty awesome introduction to rails and ruby and all the other soft skills necessary to succeed as a programmer. Michael takes you through building a twitter clone in Rails.  I'll have to go through this whole tutorial again at some point because there is just so much material to absorb here.  You will learn git, testing, rspec, partials, layouts, models, controllers, workflow, TDD (test driven development), rails, best practices, deployment, source/version control, and even some SQL, and a ton more.  It goes through how to install and setup ruby, rails, git, and heroku. 

It is very lengthy and does it's best to hold your hand through the process but there is just an abundance of information there. Even if you don't get it I would recommend methodically going through it just for the immersion as it really hit on all the important topics.

###Project Euler  
I didn't spend a ton of time because it doesn't have a built in ruby parser however once I got my ruby development up and running I ran through the first page or so of problems.  Great site for problem solving / code chunking that gets you thinking like a programmer.  A lot of the problems are difficult but I had a good time trying to decompose the problems into a program.

###Rubeque  
I spent a lot of time on this website which is a standalone ruby challenges website.  You are presented with challenges and you must fill in the correct code snippets to get the code to pass the Test::Unit cases.They start off very easy and quickly become difficult as you progress.  I did a bunch of these and had all of the ruby-doc basic class methods open - this is an awesome to way learn all the various basic class methods of arrays, strings, and hashes. Fun too.  I ended up somehow losing my github authorized account so I did them all over again with a new account and really blew through them the second time - nice indicator of progress. 

###Try Ruby and Try Git  
Try Ruby was my first experience with ruby ever and it was very user friendly.  I remember finishing up the course and then just playing around in the irb console for quite awhile.  I actually used it for quite some time as my primary compiler until I finally installed my own ruby dev environment.  The compiler gets clunky and isn't easy to scroll around if you plan to use it to test a bunch of code but it's perfect as an intro tutorial to rails.

Try Git was also my first experience with git.  It's very helpful to learn the basic commands but I don't think anything compares to actually creating your own projects/repos and learning the commands and ins/outs on your own. There is an awesome article I read from Hacker News about [commit policies](osteele.com/archives/2008/05/commit-policies) that explains and visualizes alot of the git workflow.  Highly recommended.

Accomplishments
-
+ Setup my own ruby and rails environments  
+ Learned a lot of basic object methods - strings, arrays, hashes in ruby  
+ Basic rails skills and MVC architecture  
+ Created github, heroku, and started working on standalone projects  

Goals
-
+ Finish Rails Tutorial  
+ Read up on more ruby books  
+ Attend more meetups  