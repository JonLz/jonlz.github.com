<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby monk | JonLz's Coding Blog]]></title>
  <link href="http://JonLz.github.com/blog/categories/ruby-monk/atom.xml" rel="self"/>
  <link href="http://JonLz.github.com/"/>
  <updated>2012-12-11T18:46:37-05:00</updated>
  <id>http://JonLz.github.com/</id>
  <author>
    <name><![CDATA[Jon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[November 2012]]></title>
    <link href="http://JonLz.github.com/blog/2012/12/11/november-2012/"/>
    <updated>2012-12-11T16:58:00-05:00</updated>
    <id>http://JonLz.github.com/blog/2012/12/11/november-2012</id>
    <content type="html"><![CDATA[<p>November's had some ups and downs, while I'm still making good progress I'm feeling a sort of plateau in my skills.  I think it's mostly due to my focusing my efforts on a large rails project instead of learning material.</p>

<!-- more -->


<p></p>

<p>It's that feeling of coming from a safe and confined training environment where everything is neatly packaged into a couple lines of code with corresponding tests to venturing into the vast unknown. Nothing is "hard" per se there's just so many options and ways of doing things and no instant feedback so you never really know if you're doing something the "right" way - just so long as it sort of works. At the same time, there really is something great about struggling with a programming problem and finally getting it working - a great sense of accomplishment.</p>

<p>All that said, I find myself understanding almost all of the code I find out there so my self-training has been very effective up until now. The only wild card is what I would call the "method problem" and I think can only be gained by experience as it's hard to teach (or I haven't found a great resource yet! I'm still searching and will definitely list it once I find it). The problem is learning best practices in terms of setting up rails applications, such as where to put code, how to solve problems (picking the right solution), and how to set up your application (database selection, hosting, etc.). I'm really not too worried yet as I think these skills will come with time but I do hate this nagging feeling that I could be doing things better.</p>

<p>Getting the fundamentals "out of the way" was the easy part in hindsight.  Getting the real knowledge now and figuring out what to practice next is the hard part.  With fundamentals, you "just" had to practice stuff like blocks/procs, strings, arrays, hashes, etc. But now every subject is its own field with multiple implementation solutions, best practices, etc.  Oh, the wonderful world of programming. I love it!  Stay tuned as I'm getting into the real fun stuff now.</p>

<p>Refer to my <a href="/coding-timeline">Coding Timeline</a> for all the links to the items discussed here.</p>

<h2>Things I worked on:</h2>

<h3>Repl.it</h3>

<p>Just wanted to quickly mention this here to anyone looking for a fantastic online programming language interpreter. In my opinion this is one of the better interactive interpreters for quickly trying out code in a web browser. It supports a lot of the popular languages (ruby included of course) so that you can practice coding snippets in languages such as javascript, coffeescript, python, and lua. Very cool and very practical - it's also open source which is a great plus to peek at the code. It's similar to a <a href="http://www.codepad.org">codepad.org</a> but really shines for ruby.</p>

<h3>RailsCasts</h3>

<p>I know I tend to be pretty effusive about my picks - and I only put ones here that I really like - but RailsCasts is simply amazing. Ryan Bates has done a phenomenal job of creating one of the best Rails resources on the web. In his episodes, he showcases practical solutions to common web application problems encountered in Rails, especially for newcomers. Questions like "how do I upload files?", "how does Rails routing work?", "how does the Active Record ORM work?" are explained and multiple solutions/explanations are provided. On top of that the code is all shown right in front of you in your browser and Ryan explains it step by step.</p>

<p>There is a pro subscription available for $9/month which lets you watch all of the episodes but he also offers free episodes so you can get a feel for the episodes. Well, well worth the $9 if you're just beginning and are starting to work on a real application. I can't stress how useful his solutions are as they usually work right out of the box and expand your rails knowledge at every step. Chances are if you can't figure it out from Stackoverflow, you can figure it out through RailsCasts.</p>

<h3>Practical Object-Oriented Design in Ruby (POODR) by Sandi Metz</h3>

<p>This is a very pleasurable and quick read for a primer in object oriented programming in ruby (as the name suggests). It's extremely well written with very illustrative examples and explanations of best practices on writing code that's responsive to change. After reading this book I went back and refactored one of my uglier controllers into something I was very proud of and was MUCH more forward compatible. It's really easy to apply the concepts you learn from Sandi and these are some invaluable conceptual lessons.</p>

<p>I’d recommend reading this after you’re already quite familiar with ruby fundamentals because it spares no expense in explaining basic ruby syntax. Well worth the read before delving into a medium-larger sized app (or what could become one). To share a quick example, in the rails application I’ve been working on I have a file upload interface that takes in certain types of files. Before reading this book, I had hardcoded the code that 1) reads the file, 2) checks the file type, 3) checks the file contents, 4) parses the file contents into the database into one method. Adding in new file types was very difficult as the code was bloated into one section and required shifting multiple pieces. After POODR however, I had a very easy time conceptualizing and writing the new methods that were responsible for only one thing and also used ruby struct’s to organize my file checking code. Now, adding in new types is as simple as adding in a line or two of code into one method. Very powerful stuff.</p>

<h3>Ruby Monk</h3>

<p>Ruby Monk is actually one of the first ruby resources I encountered but I didn't really understand what I was doing as I went through it unfortunately. What a mistake to give up on it so easily because I just rediscovered it recently and it's great. It covers the bare bones basics of ruby, more advanced concepts, and even metaprogramming. All the concepts are reinforced as you type in code that runs against test unit tests which feels very interactive. I'd recommend this to all levels of rubyists and the beginner module is great for newcomers, just refuse to give up even if you don't quite understand all of the syntax you're reading about. There's a lot of discussion about return values and self which can seem very abstract and fly over your head but stick with it, the way they teach is very intuitive and nothing beats typing in code and receiving instant feedback via the tests.</p>

<h3>Stack Overflow</h3>

<p>I realized I failed to mention this yet so I'm going to here just in case anyone reading this doesn't know about it yet. It's the google for programming questions. Get used to looking for answers here first - it's probably the best resource out there sometimes even better than the language APIs.</p>

<h2>Accomplishments</h2>

<ul>
<li>Gained working knowledge of some rather useful js libraries: <a href="http://www.d3js.org">D3 js</a> and <a href="http://www.datatables.net">Data Tables</a></li>
<li>Learned and applied basic concepts of OOP to a working rails app courtesy of POODR (described above) and the ruby Struct library</li>
<li>Improved rails knowledge to advanced beginner level through working on a larger rails application</li>
</ul>


<h2>Goals for December</h2>

<ul>
<li>Learn some real Rails best practices, seek out resources</li>
<li>Focus on TDD for my new rails project, find TDD resources</li>
<li>Work on an open source project [from September]</li>
<li>Write tests for all my ruby code [from September]</li>
</ul>


<h2>Goals from November</h2>

<ul>
<li>Start work on a larger rails project - COMPLETE</li>
<li>Study rails routing - COMPLETE</li>
<li>Read books on ruby as I plan to be working more on Rails - COMPLETE</li>
<li>Work on an open source project [from September] - FAIL</li>
<li>Write tests for all my ruby code [from September] - FAIL</li>
</ul>

]]></content>
  </entry>
  
</feed>
