<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails tutorial | JonLz's Coding Blog]]></title>
  <link href="http://JonLz.github.com/blog/categories/rails-tutorial/atom.xml" rel="self"/>
  <link href="http://JonLz.github.com/"/>
  <updated>2012-11-19T00:42:01-05:00</updated>
  <id>http://JonLz.github.com/</id>
  <author>
    <name><![CDATA[Jon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[September 2012]]></title>
    <link href="http://JonLz.github.com/blog/2012/10/19/september-2012/"/>
    <updated>2012-10-19T14:33:00-04:00</updated>
    <id>http://JonLz.github.com/blog/2012/10/19/september-2012</id>
    <content type="html"><![CDATA[<p>September was a whirlwind of a month of balancing my newfound obsession with ruby and other things in life.  I managed to learn a LOT and hopefully not shirk too much of my real life (apologies if I did to friends and loved ones).  I got through an entire book on ruby, finished the rails tutorial, started listening to a ruby programming podcast, and found an awesome new ruby training resource.</p>

<p>I learned what technical debt was (in a nutshell, payoffs now for the tradeoff of necessary refactoring and upgrading code later) and wow does this apply to new programmers who are basically crushed by a mountain of technical debt. The only thing you can do is take it a day at a time and a project at a time.  Always be coding. Constantly improve your skills!</p>

<p>There's also so much to love about the ruby community I don't even know where to start.  The amount of knowledge I was able to gather for free is astounding.  I think the only thing I've paid for up until this point is The Well Grounded Rubyist book and it feels like I've come a long way in just one month.</p>

<!-- more -->


<p>Refer to my <a href="/coding-timeline">Coding Timeline</a> for all the links to the items discussed here.</p>

<h2>Things I worked on:</h2>

<h3>Rails Tutorial</h3>

<p>This tutorial got a LOT more detailed and technical than I thought it would (and could have possibly hoped for).  I can't stress enough that everyone should go through this entire exercise at least once, and twice if possible.</p>

<h3>The Well Grounded Rubyist by David A. Black</h3>

<p>What an awesome book!  David expounds on all of the core features of ruby that everyone should know and delves into some really cool topics too that I had no idea even existed.  Threads, fibers, building chat servers, what?  It's really amazing what you can do with a good grasp of fundamentals in such a short amount of code.  This book really helped fill out my grasp of basic iterators, methods, objects, methods, classes, etc.  And I think I finally understand blocks/procs/lambdas upon going through the exercise of recoding some basic ruby iterators (each, map, times, etc.) as David recommends.  There's a whole slew of things that I need take a second pass at but I really feel a lot more confident after reading through this once.</p>

<h3>Ruby Rogues Podcast</h3>

<p>I'm not even sure here to start with these guys.  I don't know if they're more informative or more comedical (is this a word?).  If you want to learn about what's going on in the ruby world and the programming world at large this is what you want to listen to.  The crew is a riot and you also learn about other cool programming and non-programming topics every week as they pick and discuss their favorite tools/toys at the end of each podcast.  I've been listening to these during my commute and find myself sitting in my car for a few extra minutes before leaving just to listen to one of them wrap up a topic.  All anyone talks about on the radio these days is baseball anyway, can't wait til it's over to get back to NFL talk.. anyways.</p>

<h3>Ruby Kickstart</h3>

<p>I can't recall how I found out about this but man I wish I had earlier.  It's a series of chapters that include detailed notes and videos for each chapter and a set of problems at the end of each chapter.  There's also an online quiz available at the website for each chapter.  It's a bona fide self-study course in ruby.</p>

<p>The great thing is you get to write working code at the end of every chapter and they <em>come built in with working tests</em>.  I can't stress how great this is as you get to practice actual coding in a very specific and methodical way and then you can also look at the test to see how a proper test is written for the code you just wrote.  There really is no substitute for writing actual code and testing it and this acquaints you with both.  This has been the single-most helpful ruby resource I've found yet.  I will caution that it takes a little bit of effort to get up and running because it relies on having ruby installed and running rakes but hey - that's icing on the cake because it's just one more thing to learn about if you don't know about rake yet (I hope you do because you've done the Rails Tutorial already right?)</p>

<h2>Accomplishments</h2>

<ul>
<li>Learned a lot more about ruby fundamentals</li>
<li>Began the steep climb up the developer progression hill</li>
<li>Educating myself about and immersing myself in ongoing ruby issues and topics (thanks Ruby Rogues)</li>
<li>Pushed all my work onto github</li>
</ul>


<h2>Goals</h2>

<ul>
<li>Start work on a rails project</li>
<li>Learn more about git workflow and collaboration</li>
<li>Work on an open source project</li>
<li>Write tests for all my ruby code</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[August 2012]]></title>
    <link href="http://JonLz.github.com/blog/2012/10/19/august-2012/"/>
    <updated>2012-10-19T12:50:00-04:00</updated>
    <id>http://JonLz.github.com/blog/2012/10/19/august-2012</id>
    <content type="html"><![CDATA[<p>Since this is my first monthly update I'll discuss a little of what I want to accomplish with these.  They are intended to be monthly snapshots of where I am along the development timeline and commentary about my goals and accomplishments.</p>

<!-- more -->


<p>Refer to my <a href="/coding-timeline">Coding Timeline</a> for all the links to the items discussed here.</p>

<h2>Things I worked on:</h2>

<h3>Rails Tutorial by Michael Hartl</h3>

<p>This is a pretty awesome introduction to rails and ruby and all the other soft skills necessary to succeed as a programmer. Michael takes you through building a twitter clone in Rails.  I'll have to go through this whole tutorial again at some point because there is just so much material to absorb here.  You will learn git, testing, rspec, partials, layouts, models, controllers, workflow, TDD (test driven development), rails, best practices, deployment, source/version control, and even some SQL, and a ton more.  It goes through how to install and setup ruby, rails, git, and heroku.</p>

<p>It is very lengthy and does it's best to hold your hand through the process but there is just an abundance of information there. Even if you don't get it I would recommend methodically going through it just for the immersion as it really hit on all the important topics.</p>

<h3>Project Euler</h3>

<p>I didn't spend a ton of time because it doesn't have a built in ruby parser however once I got my ruby development up and running I ran through the first page or so of problems.  Great site for problem solving / code chunking that gets you thinking like a programmer.  A lot of the problems are difficult but I had a good time trying to decompose the problems into a program.</p>

<h3>Rubeque</h3>

<p>I spent a lot of time on this website which is a standalone ruby challenges website.  You are presented with challenges and you must fill in the correct code snippets to get the code to pass the Test::Unit cases.They start off very easy and quickly become difficult as you progress.  I did a bunch of these and had all of the ruby-doc basic class methods open - this is an awesome to way learn all the various basic class methods of arrays, strings, and hashes. Fun too.  I ended up somehow losing my github authorized account so I did them all over again with a new account and really blew through them the second time - nice indicator of progress.</p>

<h3>Try Ruby and Try Git</h3>

<p>Try Ruby was my first experience with ruby ever and it was very user friendly.  I remember finishing up the course and then just playing around in the irb console for quite awhile.  I actually used it for quite some time as my primary compiler until I finally installed my own ruby dev environment.  The compiler gets clunky and isn't easy to scroll around if you plan to use it to test a bunch of code but it's perfect as an intro tutorial to rails.</p>

<p>Try Git was also my first experience with git.  It's very helpful to learn the basic commands but I don't think anything compares to actually creating your own projects/repos and learning the commands and ins/outs on your own. There is an awesome article I read from Hacker News about <a href="osteele.com/archives/2008/05/commit-policies">commit policies</a> that explains and visualizes alot of the git workflow.  Highly recommended.</p>

<h2>Accomplishments</h2>

<ul>
<li>Setup my own ruby and rails environments</li>
<li>Learned a lot of basic object methods - strings, arrays, hashes in ruby</li>
<li>Basic rails skills and MVC architecture</li>
<li>Created github, heroku, and started working on standalone projects</li>
</ul>


<h2>Goals</h2>

<ul>
<li>Finish Rails Tutorial</li>
<li>Read up on more ruby books</li>
<li>Attend more meetups</li>
</ul>

]]></content>
  </entry>
  
</feed>
