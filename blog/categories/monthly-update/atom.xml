<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: monthly update | JonLz's Coding Blog]]></title>
  <link href="http://JonLz.github.com/blog/categories/monthly-update/atom.xml" rel="self"/>
  <link href="http://JonLz.github.com/"/>
  <updated>2012-11-19T00:42:01-05:00</updated>
  <id>http://JonLz.github.com/</id>
  <author>
    <name><![CDATA[Jon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[October 2012]]></title>
    <link href="http://JonLz.github.com/blog/2012/11/18/october-2012/"/>
    <updated>2012-11-18T23:09:00-05:00</updated>
    <id>http://JonLz.github.com/blog/2012/11/18/october-2012</id>
    <content type="html"><![CDATA[<p>October ended up being a great month for my programming career. I feel a lot better versed in ruby syntax and started becoming a lot more confident in rails. I'm able to think up solutions to problems in much more programmatical/organized manner and am slowly beginning to understand how the basic rails information flow works. I still don't quite understand routing as I'm still creating routes by hand and not using the built in rails paths. Maybe I need to read up on REST, but I'm definitely going to be focusing on this next month.</p>

<p>My git workflow is getting a lot more effortless as well. I need to begin working on some open source projects to learn collaboration skills on projects but my use of git-fu for source control is strong now. I'll be creating a page for my most used git commands and any cool ones I discover, I'm still looking up new ones almost daily or trying to refine my workflow.</p>

<p>I'm also slowly starting to become more competent in javascript, jquery, and css which is definitely showing up as I work through rails views. Next up is understanding json and how to have rails serve up friendly javascript variables to my views. I'm sure theres millions of helpers/gems available out there - it'll be time to find them and report back here when I do. I don't think my projects are big enough to get going with backbone and node yet (or would even need node for the architectures I'm using) but it's good to have some working knowledge of them as I pursue full-stack programming.</p>

<p>Last but not least, I finally got tired of my windows IDE and I'm working on setting up a new Mac, monitor, and programming environment. Time to learn all the bash commands I've been missing out on.</p>

<!-- more -->


<p>Refer to my <a href="/coding-timeline">Coding Timeline</a> for all the links to the items discussed here.</p>

<h2>Things I worked on:</h2>

<h3>Rails Projects: Blackjack</h3>

<p>This was a project I honestly can't recall how I discovered.  I most likely stumbled upon it during one of my hack googling sessions in search of an answer to some beginner programming question.  It's a great little tutorial which was built by Tim Jensen presumably after he finished Michael Hartl's Rails Tutorial app.  It leverages a lot of the code from that tutorial and breezes through it but then slows down to go through the actual coding of a pretty decent blackjack rails based game.</p>

<p>I would say it's great practice to go through the full setup from start to finish of creating a new rails app and brining it to fruition. Lots of concepts are explained, especially the use of AJAX to make a responsive blackjack UI with images and buttons. The code tests are shown as well which is doubly nice.</p>

<h3>Ruby Projects: Word Scramble, Conway's Game of Life</h3>

<p>I'll just discuss my word scramble solver here quickly as I already posted a pretty lengthy walkthrough of my Conway's Game of Life program. I really enjoy the word scramble game by Zynga on my phone so naturally I tried to create a solver program for the game.  Not to cheat at the game, but for my edification and to see how my ruby skills had been coming along. It was essentially created in a hack'y fashion as I used an array of coordinates so I would know each cell's neighbors during the recursive calls. Not elegant, but functional. Other than that, it builds the word, then checks it against a dictionary and returns a list of the highest scoring words to the user. Oh, I learned a lot about hashes too. Hashes are epic.</p>

<p>Well it was a great success and introduced some new concepts and solidified my understanding of how classes and methods work. I'm pretty proud of it and would love to get this up on a rails framework so it's easier to use when I have more time.</p>

<h3>Reddit dailyprogrammer</h3>

<p>This is a pretty nice, updated daily as the name indicates, collection of programming challenges that you can attempt to solve to stretch your programming skills. They come in beginner, intermediate, and advanced varieties and programmers from all kinds of backgrounds submit their answers and discuss the problems in great detail. So far I haven't solved any advanced (too time consuming for me), only a handful of intermediates, and all the beginner challenges I've seen. Ruby seems somewhat under-represented in the forums but you can usually find one or two ruby solutions. I see mostly python and C/C++ which is interesting to compare my solution to those.  Ruby is almost always shorter in terms of lines of code and readability. I'm not sure about performance but it's fun seeing a solution in another language that's 30 some odd lines of code vs. mine which is 5.</p>

<h3>Bastard's Book of Ruby</h3>

<p>This is a great resource that discusses web scraping and some more practical uses of ruby as a scripting language instead of the usual focus on OOP and rails. I like that the author takes time to explain ruby from a beginner's perspective and then dives right into how useful it can be with real examples. I'm still at the point where I consider myself a beginner and although I understood all of the things he was talking about they were all still very useful. Nokogiri and Mechanize are two really amazing gems and all new rubyists should at least be aware they're out there. The basic process involves opening URIs and then capturing data from HTML tags or files, etc. It reminds me of a cURL scripting tool written in ruby. You can do some really cool data harvesting and harness the power of ruby to tame web pages which may not be so nice. I haven't even begun to scratch the surface here but it's already drawn me in.</p>

<h3>Ruby Warrior</h3>

<p>This project tasks you with fighting your way out of various dungeons and gradually gives you more tools to do so. You start off only able to walk in one direction and gradually gain the ability to swing swords, rescue captives, and cast spells. It's also a super useful and FUN way to learn ruby. You begin with simple control flow but then slowly need to start accounting for different variables and conditions which forces you to create other methods and classes. You never really feel like you're programming as you're worrying about solving the puzzle of how to get past the stage but at the same time you're writing real code and learning a lot in the process.</p>

<p>There are two stages, beginner and intermediate, and two modes, original and time-attack which give you all kinds of challenges and keep you engaged. The beginner mode is pretty straightforward with just a single path to walk down but the intermediate level gets complicated a lot faster as the map becomes open ended and you get a lot more choices. In original mode you play through each level and only have to account for the variables of that level. In time-attack you start from level 1 and keep going until you die: the goal being to get to the end with one file of code.</p>

<p>Simply a great way to learn ruby and has enough competitive elements to keep you interested. I highly recommend this one! I still need to make my way through the intermediate level. Oh, I was able to introduce the beginner version of this game to my girlfriend, who doesn't have any programming experience, and she was super absorbed by it - it's that deceptively great at teaching in a gameified way.</p>

<h3>Code School and Code Academy</h3>

<p>I think these are pretty self-explanatory but I have to include them here. They offer tons of modules covering a gamut of programming topics and walk you through from the beginning. Git, backbone.js, node.js, jQuery, javascript, html, css, ruby, rails, rspec are among the ones I can recall being covered between these 2. Code School costs money for premium modules and Code Academy is free. Code School is definitely the more polished of the 2 and has a broader offering but Code Academy is a very good alternative and is more project based whereas Code School is video/exam based. This is a great way to get introduced to other web technologies if you aren't yet familiar (especially javascript based). Like it or not everyone needs to know some java.</p>

<h2>Accomplishments</h2>

<ul>
<li>Picked up a lot of ancillary knowledge around other web technologies (Javascript, jQuery, Backbone, Node - thanks Code School)</li>
<li>Learned a lot more of the ins and outs of git</li>
<li>Completed a new rails app from scratch - picked up some AJAX knowledge</li>
<li>Became familiar with basic regex syntax</li>
</ul>


<h2>Goals For November</h2>

<ul>
<li>Start work on a larger rails project</li>
<li>Study rails routing</li>
<li>Read books on ruby as I plan to be working more on Rails</li>
<li>Work on an open source project [from September]</li>
<li>Write tests for all my ruby code [from September]</li>
</ul>


<h2>Goals From September</h2>

<ul>
<li>Start work on a rails project -- COMPLETE</li>
<li>Learn more about git workflow and collaboration -- COMPLETE</li>
<li>Work on an open source project -- FAIL</li>
<li>Write tests for all my ruby code -- FAIL</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[September 2012]]></title>
    <link href="http://JonLz.github.com/blog/2012/10/19/september-2012/"/>
    <updated>2012-10-19T14:33:00-04:00</updated>
    <id>http://JonLz.github.com/blog/2012/10/19/september-2012</id>
    <content type="html"><![CDATA[<p>September was a whirlwind of a month of balancing my newfound obsession with ruby and other things in life.  I managed to learn a LOT and hopefully not shirk too much of my real life (apologies if I did to friends and loved ones).  I got through an entire book on ruby, finished the rails tutorial, started listening to a ruby programming podcast, and found an awesome new ruby training resource.</p>

<p>I learned what technical debt was (in a nutshell, payoffs now for the tradeoff of necessary refactoring and upgrading code later) and wow does this apply to new programmers who are basically crushed by a mountain of technical debt. The only thing you can do is take it a day at a time and a project at a time.  Always be coding. Constantly improve your skills!</p>

<p>There's also so much to love about the ruby community I don't even know where to start.  The amount of knowledge I was able to gather for free is astounding.  I think the only thing I've paid for up until this point is The Well Grounded Rubyist book and it feels like I've come a long way in just one month.</p>

<!-- more -->


<p>Refer to my <a href="/coding-timeline">Coding Timeline</a> for all the links to the items discussed here.</p>

<h2>Things I worked on:</h2>

<h3>Rails Tutorial</h3>

<p>This tutorial got a LOT more detailed and technical than I thought it would (and could have possibly hoped for).  I can't stress enough that everyone should go through this entire exercise at least once, and twice if possible.</p>

<h3>The Well Grounded Rubyist by David A. Black</h3>

<p>What an awesome book!  David expounds on all of the core features of ruby that everyone should know and delves into some really cool topics too that I had no idea even existed.  Threads, fibers, building chat servers, what?  It's really amazing what you can do with a good grasp of fundamentals in such a short amount of code.  This book really helped fill out my grasp of basic iterators, methods, objects, methods, classes, etc.  And I think I finally understand blocks/procs/lambdas upon going through the exercise of recoding some basic ruby iterators (each, map, times, etc.) as David recommends.  There's a whole slew of things that I need take a second pass at but I really feel a lot more confident after reading through this once.</p>

<h3>Ruby Rogues Podcast</h3>

<p>I'm not even sure here to start with these guys.  I don't know if they're more informative or more comedical (is this a word?).  If you want to learn about what's going on in the ruby world and the programming world at large this is what you want to listen to.  The crew is a riot and you also learn about other cool programming and non-programming topics every week as they pick and discuss their favorite tools/toys at the end of each podcast.  I've been listening to these during my commute and find myself sitting in my car for a few extra minutes before leaving just to listen to one of them wrap up a topic.  All anyone talks about on the radio these days is baseball anyway, can't wait til it's over to get back to NFL talk.. anyways.</p>

<h3>Ruby Kickstart</h3>

<p>I can't recall how I found out about this but man I wish I had earlier.  It's a series of chapters that include detailed notes and videos for each chapter and a set of problems at the end of each chapter.  There's also an online quiz available at the website for each chapter.  It's a bona fide self-study course in ruby.</p>

<p>The great thing is you get to write working code at the end of every chapter and they <em>come built in with working tests</em>.  I can't stress how great this is as you get to practice actual coding in a very specific and methodical way and then you can also look at the test to see how a proper test is written for the code you just wrote.  There really is no substitute for writing actual code and testing it and this acquaints you with both.  This has been the single-most helpful ruby resource I've found yet.  I will caution that it takes a little bit of effort to get up and running because it relies on having ruby installed and running rakes but hey - that's icing on the cake because it's just one more thing to learn about if you don't know about rake yet (I hope you do because you've done the Rails Tutorial already right?)</p>

<h2>Accomplishments</h2>

<ul>
<li>Learned a lot more about ruby fundamentals</li>
<li>Began the steep climb up the developer progression hill</li>
<li>Educating myself about and immersing myself in ongoing ruby issues and topics (thanks Ruby Rogues)</li>
<li>Pushed all my work onto github</li>
</ul>


<h2>Goals</h2>

<ul>
<li>Start work on a rails project</li>
<li>Learn more about git workflow and collaboration</li>
<li>Work on an open source project</li>
<li>Write tests for all my ruby code</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[August 2012]]></title>
    <link href="http://JonLz.github.com/blog/2012/10/19/august-2012/"/>
    <updated>2012-10-19T12:50:00-04:00</updated>
    <id>http://JonLz.github.com/blog/2012/10/19/august-2012</id>
    <content type="html"><![CDATA[<p>Since this is my first monthly update I'll discuss a little of what I want to accomplish with these.  They are intended to be monthly snapshots of where I am along the development timeline and commentary about my goals and accomplishments.</p>

<!-- more -->


<p>Refer to my <a href="/coding-timeline">Coding Timeline</a> for all the links to the items discussed here.</p>

<h2>Things I worked on:</h2>

<h3>Rails Tutorial by Michael Hartl</h3>

<p>This is a pretty awesome introduction to rails and ruby and all the other soft skills necessary to succeed as a programmer. Michael takes you through building a twitter clone in Rails.  I'll have to go through this whole tutorial again at some point because there is just so much material to absorb here.  You will learn git, testing, rspec, partials, layouts, models, controllers, workflow, TDD (test driven development), rails, best practices, deployment, source/version control, and even some SQL, and a ton more.  It goes through how to install and setup ruby, rails, git, and heroku.</p>

<p>It is very lengthy and does it's best to hold your hand through the process but there is just an abundance of information there. Even if you don't get it I would recommend methodically going through it just for the immersion as it really hit on all the important topics.</p>

<h3>Project Euler</h3>

<p>I didn't spend a ton of time because it doesn't have a built in ruby parser however once I got my ruby development up and running I ran through the first page or so of problems.  Great site for problem solving / code chunking that gets you thinking like a programmer.  A lot of the problems are difficult but I had a good time trying to decompose the problems into a program.</p>

<h3>Rubeque</h3>

<p>I spent a lot of time on this website which is a standalone ruby challenges website.  You are presented with challenges and you must fill in the correct code snippets to get the code to pass the Test::Unit cases.They start off very easy and quickly become difficult as you progress.  I did a bunch of these and had all of the ruby-doc basic class methods open - this is an awesome to way learn all the various basic class methods of arrays, strings, and hashes. Fun too.  I ended up somehow losing my github authorized account so I did them all over again with a new account and really blew through them the second time - nice indicator of progress.</p>

<h3>Try Ruby and Try Git</h3>

<p>Try Ruby was my first experience with ruby ever and it was very user friendly.  I remember finishing up the course and then just playing around in the irb console for quite awhile.  I actually used it for quite some time as my primary compiler until I finally installed my own ruby dev environment.  The compiler gets clunky and isn't easy to scroll around if you plan to use it to test a bunch of code but it's perfect as an intro tutorial to rails.</p>

<p>Try Git was also my first experience with git.  It's very helpful to learn the basic commands but I don't think anything compares to actually creating your own projects/repos and learning the commands and ins/outs on your own. There is an awesome article I read from Hacker News about <a href="osteele.com/archives/2008/05/commit-policies">commit policies</a> that explains and visualizes alot of the git workflow.  Highly recommended.</p>

<h2>Accomplishments</h2>

<ul>
<li>Setup my own ruby and rails environments</li>
<li>Learned a lot of basic object methods - strings, arrays, hashes in ruby</li>
<li>Basic rails skills and MVC architecture</li>
<li>Created github, heroku, and started working on standalone projects</li>
</ul>


<h2>Goals</h2>

<ul>
<li>Finish Rails Tutorial</li>
<li>Read up on more ruby books</li>
<li>Attend more meetups</li>
</ul>

]]></content>
  </entry>
  
</feed>
